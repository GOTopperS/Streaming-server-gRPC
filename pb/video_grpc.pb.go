// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: video.proto

package grpcservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	GetVideoStream(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (VideoService_GetVideoStreamClient, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetVideoStream(ctx context.Context, in *VideoRequest, opts ...grpc.CallOption) (VideoService_GetVideoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[0], "/videoservice.VideoService/GetVideoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceGetVideoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoService_GetVideoStreamClient interface {
	Recv() (*VideoResponse, error)
	grpc.ClientStream
}

type videoServiceGetVideoStreamClient struct {
	grpc.ClientStream
}

func (x *videoServiceGetVideoStreamClient) Recv() (*VideoResponse, error) {
	m := new(VideoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	GetVideoStream(*VideoRequest, VideoService_GetVideoStreamServer) error
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) GetVideoStream(*VideoRequest, VideoService_GetVideoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideoStream not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetVideoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoServiceServer).GetVideoStream(m, &videoServiceGetVideoStreamServer{stream})
}

type VideoService_GetVideoStreamServer interface {
	Send(*VideoResponse) error
	grpc.ServerStream
}

type videoServiceGetVideoStreamServer struct {
	grpc.ServerStream
}

func (x *videoServiceGetVideoStreamServer) Send(m *VideoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videoservice.VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVideoStream",
			Handler:       _VideoService_GetVideoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "video.proto",
}
